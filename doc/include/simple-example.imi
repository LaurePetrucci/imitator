(************************************************************
 *                      IMITATOR MODEL
 *
 * A simple example to introduce networks of IMITATOR parametric timed automata
 *
 * Author          : Etienne Andre
 *
 * Created         : 2015/05/10
 * Last modified   : 2015/05/10
 *
 * IMITATOR version: 2.7
 ************************************************************)

var

(* Clocks *)
 	x, y
		: clock;

(* Discrete *)
	i, j
		: discrete;

(* Parameters *)
	p1, p2
		: parameter;


(************************************************************)
  automaton pta1
(************************************************************)
synclabs: a;

loc l1: while True wait {}
	when x = 1 sync a do {x' = 0} goto l1;

end (* pta1 *)


(************************************************************)
  automaton pta2
(************************************************************)
synclabs: a,b;

loc l1: while True wait {}
	when x = 1 sync a do {x' = 0} goto l1;

end (* pta2 *)


(************************************************************)
(* Initial state *)
(************************************************************)

init := True
	(*------------------------------------------------------------
	   INITIAL LOCATION
	  ------------------------------------------------------------*)
	& loc[pta1] = l1
	& loc[pta2] = l1

	(*------------------------------------------------------------
	   INITIAL CLOCKS
	  ------------------------------------------------------------*)
	& x = 0
	& y >= 0

	(*------------------------------------------------------------
	   INITIAL DISCRETE
	  ------------------------------------------------------------*)
	& i = 0
	& j = 2

	(*------------------------------------------------------------
	   PARAMETER CONSTRAINTS
	  ------------------------------------------------------------*)
	& p1 >= 0
	& p1 <= p2
;


(************************************************************)
(* Property specification *)
(************************************************************)

property := unreachable loc[pta1] = l3;

end

