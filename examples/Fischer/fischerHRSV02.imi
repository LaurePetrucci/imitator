--************************************************************--
--************************************************************--
--
--   Fischer's mutual exclusion protocol
--
--   From "Linear Parametric Model Checking of Timed Automata"
--                   Hune, Romijn, Stoelinga, Vaandrager, 2002
--
--                                Created : 2013/12/10
--                          Last modified : 2013/12/10
--************************************************************--
--************************************************************--

var 
	-- P1's clock
	x_1,
	-- P2's clock
	x_2,
		:clock;
	

	lock
		: discrete;

	min_rw, max_rw,
	min_delay, max_delay,
		: parameter;

--************************************************************--
automaton pta_1
--************************************************************--
synclabs: ;

loc start_1: while x_1 <= max_rw wait {}
	(* Actually lock != 0 *)
	when lock = 1 & x_1 > min_rw do {x_1' = 0} goto start_1;
	when lock = 2 & x_1 > min_rw do {x_1' = 0} goto start_1;

	when lock = 0 & x_1 > min_rw do {x_1' = 0} goto set_1;

loc set_1: while x_1 <= max_rw wait {}
	(* Actually lock = i *)
	when x_1 > min_rw do {lock' = 1, x_1' = 0} goto tryenter_1;

loc tryenter_1: while x_1 <= max_delay wait {}
	(* Actually lock = i *)
	when x_1 > min_delay & lock = 1 goto cs_1;
	(* Actually lock != i *)
	when x_1 > min_delay & lock = 0 do {x_1' = 0} goto start_1;
	when x_1 > min_delay & lock = 2 do {x_1' = 0} goto start_1;

loc cs_1: while True wait {}
	when True do {x_1' = 0, lock' = 0} goto start_1;

end -- pta_1



--************************************************************--
automaton pta_2
--************************************************************--
synclabs: ;

loc start_2: while x_2 <= max_rw wait {}
	(* Actually lock != 0 *)
	when lock = 1 & x_2 > min_rw do {x_2' = 0} goto start_2;
	when lock = 2 & x_2 > min_rw do {x_2' = 0} goto start_2;

	when lock = 0 & x_2 > min_rw do {x_2' = 0} goto set_2;

loc set_2: while x_2 <= max_rw wait {}
	(* Actually lock = i *)
	when x_2 > min_rw do {lock' = 2, x_2' = 0} goto tryenter_2;

loc tryenter_2: while x_2 <= max_delay wait {}
	(* Actually lock = i *)
	when x_2 > min_delay & lock = 2 goto cs_2;
	(* Actually lock != i *)
	when x_2 > min_delay & lock = 0 do {x_2' = 0} goto start_2;
	when x_2 > min_delay & lock = 1 do {x_2' = 0} goto start_2;

loc cs_2: while True wait {}
	when True do {x_2' = 0, lock' = 0} goto start_2;

end -- pta_2

--************************************************************--
--************************************************************--
-- ANALYSIS
--************************************************************--
--************************************************************--


var 
   init: region;

   
init :=
	----------------------
	-- Initial locations
	----------------------
	& loc[pta_1] = start_1
	& loc[pta_2] = start_2	
	
	----------------------
	-- Clocks
	----------------------
	& x_1 = 0
	& x_2 = 0

	----------------------
	-- Discrete
	----------------------
	& lock = 0

	----------------------
	-- Parameters
	----------------------
	& 0 <= min_rw
	& min_rw < max_rw
	& 0 <= min_delay
	& min_delay < max_delay
;

