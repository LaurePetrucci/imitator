-- Fischer's mutual exclusion protocol
var 
	x1,      	-- P1's clock
	x2:clock;    		-- P2's clock
	

	k
	: discrete;

	a,
	b: parameter;

	
 -- -------------------------------------------------------------- *)

automaton proc1
synclabs : tau,start1,set1,enter1,abort1,release1;


loc idle: while True wait {}
	when k=0 sync start1 do {x1' =0} goto start;
	when True sync tau do {} goto idle;
	
loc start: while x1<=a wait {}
	when True sync set1 do {k' =1 , x1' =0} goto check;
	when True sync tau do {} goto start;

loc check: while True wait {}
	when k=1 & x1>=b sync enter1 goto CS;
	when k<1 & x1>=b sync abort1 goto idle;
	when k>1 & x1>=b sync abort1 goto idle;
	when True sync tau do {} goto check;

loc CS: while True wait {}
	when True sync release1 do {k' = 0} goto idle;
	when True sync tau do {} goto CS;
end

automaton proc2
synclabs : tau,start2,set2,enter2,abort2,release2;


loc idle: while True wait {}
	when k=0 sync start2 do {x2' =0} goto start;
	when True sync tau do {} goto idle;
	
loc start: while x2<=a wait {}
	when True sync set2 do {k' =2,x2' =0} goto check;
	when True sync tau do {} goto start;

loc check: while True wait {}
	when k=2 & x2>=b sync enter2 goto CS;
	when k<2 & x2>=b sync abort2 goto idle;
	when k>2 & x2>=b sync abort2 goto idle;
	when True sync tau do {} goto check;

loc CS: while True wait {}
	when True sync release2 do {k' = 0} goto idle;
	when True sync tau do {} goto CS;
end

automaton arbiter
synclabs : set1,release1,
           set2,release2,
	   tau;
	   

loc always: while True wait {}
	when True sync set1 do {} goto always;
	when True sync release1 do {} goto always;
	when True sync set2 do {} goto always;
	when True sync release2 do {} goto always;
	when True sync tau do {} goto always;
end
	
--

var 
   init: region;

init:= loc[proc1] = idle & loc[proc2] = idle & loc[arbiter] = always & x1 = 0 & x2 = 0 & k=0;



