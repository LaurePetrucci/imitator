--****************************************************--
--****************************************************--
--
--   SIMOP Project
--
--   LSV and LURPA
--   ENS de Cachan, France
--
--                                Created :     < 2008
--                          Last modified : 16/02/2009
--****************************************************--
--****************************************************--
-- automates de etude 1110 - V8

var 	x1, x2 (*, NETclk, RIOclk, ENVclk*) ,
	x4 (*, zz*)
	: clock;

	(*PLCmx1,*) p2,
	p3,
	p1
	: parameter;


--****************************************************--
automaton COM
--****************************************************--
synclabs : (*PLCout0, *)int1, int2, int3, int4;
initially Q0;

(*loc COM1 : while True wait{}
	when True do {x2'=0} goto Q1;
(* 	when True sync PLCout0 goto COM1;  -- remis le 30/06/07 ----* *) *)

loc Q0: while True wait{}
	when True goto Q1; (*ICI : AJOUTER p2 >= p1 & p2 >= p3*)
	when True goto Q0bis;

loc Q0bis: while True wait{}
	when p2 >= p1 & p2 >= p3 do {x1' = 0, x2' = 0} goto Q1;

loc Q1 : while True  wait{}
	when x2 >=p3  sync int1 do {} goto Q2;
(* 	when True sync PLCout0 goto Q1; -- (remis) (retrait --> loss!!!) *)

loc Q2 : while x1<= p2 wait{}
	when True sync int4 do {x1'=0} goto Q4;
(* 	when True sync PLCout0 goto Q2;	-- retrait --> loss *)
(* 	when True sync NCrep1 do {x1'=0} goto COM5; *)

(* loc COM5 : while x1=0 wait{} *)
(* 	when x1=0 sync COMin1 do {} goto Q4; *)

loc Q4 : while x2 <= p1 wait{}
	when x2 = p1 sync int3 do {x2'=0} goto Q1;
(* 	when True sync PLCout0 goto Q4; -- remis le 30/06/07	 de 10 mn a 1h >> OVERFLOW *)
(* 	when True sync PLCout1 goto COM11; --*	-- retrait le 03/07/07 --- de 10 mn a 1h *)

(*loc COM7 : while x2 <= p3 wait{}		
	when x2=p3  sync int1 do {} goto COM8;
(* 	when True sync PLCout1 goto COM7; ---- remis le 30/06/07 ----* *)

loc COM8 : while x2 <= p1 wait{}  -- inv. nouveau
	when True sync int2 do {x1'=0} goto COM9;   -- retrait le 03/07/07 ----*
(* 	when True sync PLCout1 goto COM8; -- remis le 30/06/07 ----* *)
	when True sync NCrep1 do {x1'=0} goto COM10;

loc COM9 : while x1=0 wait{} ----*
	when x1=0 sync a do {} goto COM11; -- retrait 03/07/07 (no call)

loc COM10 : while x1=0 wait{}
(* 	when x1=0 sync COMin1 do {} goto COM11; *)

loc COM11 : while x2<= p1 wait{}
	when x2= p1  do {x2'=0} goto COM12; 
(* 	when True sync PLCout1 goto COM11; -- remis 30/06/07 (retrait ->loss!!) *)

loc COM12 : while x2 <= p3 wait{}		
	when x2=p3  sync CNreq1 do {} goto COM13; -- = au lieu de <=
(* 	when True sync PLCout1 goto COM12; -- retrait 03/07/07 ----* *)

loc COM13 : while x2 <= p1 wait{}  -- inv. nouveau
	when True sync NCrep1 
			do {x1'=0} goto COM14;--(03/07) before:goto COM14 ----*
(* 	when True sync PLCout1 goto COM13; -- (retrait: 55 it.--> 54) *)



 loc COM14 : while x1=0 wait{}					----* / ----*
(* 	when x1=0 sync COMin1 do {} goto COM15;  --(03/07/07) before goto COM15 *)

loc COM15 : while x2<= p1 wait{}				----*
	when x2= p1  do {x2'=0} goto COM12; 		----**)

(* 	when True sync PLCout1 goto COM15;  -- retrait 03/07/07 ----* *)
end -- COM


(*

--****************************************************--
automaton NET
--****************************************************--
synclabs : int1, CNreq1, int2, NCrep1, NRreq0, NRreq1, RNrep0, RNrep1;
initially NET1;

loc NET1: while True wait {}
	when True  sync int1 do {NETclk'=0} goto NET2;
	when True  sync CNreq1 do {NETclk'=0} goto NET5;

loc NET2 : while NETclk <= NETd wait{}
	when NETclk=NETd sync NRreq0 do {} goto NET3;

loc NET3 : while True wait{}
	when True  sync RNrep0 do {NETclk'=0} goto NET4;
	when True  sync RNrep1 do {NETclk'=0} goto NET7;

loc NET4 : while NETclk<=NETd wait{}
	when NETclk=NETd sync int2  goto NET1;

loc NET5 : while NETclk <= NETd wait{}
	when NETclk=NETd sync NRreq1 goto NET6;

loc NET6 : while True wait{}
	when True  sync RNrep1 do {NETclk'=0} goto NET7;

loc NET7 : while NETclk<=NETd wait{}
	when NETclk=NETd sync NCrep1  do {} goto NET1;

end -- NET
*)

(*
--****************************************************--
automaton RIO
--****************************************************--
synclabs : NRreq0, RNrep0, SIGout0, NRreq1, RNrep1, SIGin1, SIGout1;
initially RIO1;

loc RIO1: while True wait {}
	when True  sync NRreq0 do {RIOclk'=0} goto RIO2;
----	when True  sync SIGin1 do {} goto RIO6;

loc RIO2 : while RIOclk <= RIOd wait{}
	when RIOclk=RIOd sync SIGout0 do {zz'=0} goto RIO3;
	when True  sync SIGin1 do {} goto RIO4;

loc RIO3 : while zz=0 wait{}
	when zz=0  sync RNrep0 do {} goto RIO1;
-----	when zz=0  sync SIGin1 do {} goto RIO5;

loc RIO4 : while RIOclk <= RIOd wait{}
	when RIOclk=RIOd sync SIGout0 do {zz'=0} goto RIO5;

loc RIO5 : while zz=0 wait{}
	when zz=0  sync RNrep0 do {} goto RIO6;

loc RIO6: while True wait {}
	when True  sync NRreq0 do {RIOclk'=0} goto RIO7;
	when True  sync NRreq1 do {RIOclk'=0} goto RIO9;

loc RIO7 : while RIOclk <= RIOd wait{}
	when RIOclk=RIOd sync SIGout0 do {zz'=0} goto RIO8;


loc RIO8 : while zz=0 wait{}
	when zz=0  sync RNrep1 do {} goto RIO6;

loc RIO9 : while RIOclk <= RIOd wait{}
	when RIOclk=RIOd sync SIGout1 do {zz'=0} goto RIO10;

loc RIO10 : while zz=0 wait{}
	when zz=0  sync RNrep1 do {} goto RIO6;


end -- RIO
*)


(*
--****************************************************--
automaton ENV
--****************************************************--
synclabs : SIGout0, SIGout1, SIGin1;
initially ENVinit;

loc ENVinit: while True wait {}
	when True sync SIGout0 goto ENV1;


loc ENV1: while True  wait {}
	when True sync SIGin1 do {ENVclk'=0} goto ENV2; 
	when True sync SIGout0 do {} goto ENV1;

loc ENV2 : while ENVclk <= SIGmrt wait{}
	when True sync SIGout0 do {} goto ENV2;   
	when True sync SIGout1 do {x4'=0} goto ENV4; 
	when ENVclk=SIGmrt do {x4'=0} goto ENV5;

loc ENV4 : while x4=0 wait{}
-- 	when True -- sync SIGout1 
-- 		goto ENV4;


loc ENV5: while x4=0 wait{}
-- 	when True -- sync SIGout1 
-- 			goto ENV5;
--	when True -- sync SIGout0 
--			goto ENV5;

end -- ENV
*)



--****************************************************--
--****************************************************--
-- ANALYSIS
--****************************************************--
--****************************************************--

var init : region;

init := loc[COM]=(*COMinit*) Q0

	& 	x1 =0 & x2 =0 (* & NETclk>=0 & RIOclk>=0 & ENVclk>=0 *)

(*	&	p2  > 0
	&	p1  > 0
(* 	&	PLCmx1  > 0 *)
	&	p3  > 0*)


	& 	x4 = 0 (*& zz=0*)
	
	& p1 >= 0
	& p2 >= 0
	& p3 >= 0
	
(*	&	p1  = 2 -- 500
	&	p2  = 3 -- 600
	&	p3   = 1 -- 25*)

;
