--************************************************************--
--************************************************************--
--
--   FMTV 2014: case study #2
--
--   Youcheng Sun
--
--                                Created : 2014/07/02
--                          Last modified : 2014/07/02
--                       IMITATOR version : 2.6.2
--************************************************************--
--************************************************************--

var
    p2, c2, p6, c6 : clock;
    J6=0, C61_BEST=4, C61_WORST=4, C62_BEST=9, C62_WORST=10, C63_BEST=4, C63_WORST=5,
    C5_BEST=4, C5_WORST=7, C7_BEST=11, C7_WORST=14, C2_BEST=17, C2_WORST=17,
    delta=10 : discrete;
    T2, T6 : parameter;

automaton sched

loc idle : while p2<=T2 & p6<=T6+J6 wait {}
    when p2>=T2 do {p2'=0, c2'=0} goto x2R;
    when p6>=T6 do {p6'=0, c6'=0} goto x61R;

loc x2R : while c2<=C2_WORST & p6<=T6+J6 wait {}
    when c2>=C2_BEST do {} goto idle;
    when p6>=T6 do{p6'=0, c6'=0} goto x2R61W;

loc x61R : while c6<=C61_WORST & p6<=T6-delta & p2<=T2 wait {}
    when c6>=C61_BEST do {c6'=0} goto x5R;
    when p6>=T6-delta do {} goto error;
    when p2>=T2 do {p2'=0, c2'=0} goto x2R61W;

loc x2R61W : while c2<=C2_WORST & p6<=T6-delta stop {c6}
    when c2>=C2_BEST do {} goto x61R;
    when p6>=T6-delta do {} goto error;

loc x5R : while c6<=C5_WORST & p6<=T6-delta & p2<=T2 wait{}
    when c6>=C5_BEST do {c6'=0} goto x62R;
    when p6>=T6-delta do {} goto error;
    when p2>=T2 do{p2'=0,c2'=0} goto x2W5R;
    
loc x2W5R : while c6<=C5_WORST & p6<=T6-delta wait{}
    when c6>=C5_BEST do {c6'=0, c2'=0}  goto x2R62W;
    when p6>=T6-delta do {} goto error;

loc x62R : while c6<=C62_WORST & p6<=T6-delta & p2<=T2 wait{}
    when c6>=C62_BEST do{c6'=0} goto x63R7W;
    when p6>=T6-delta do {} goto error;
    when p2>=T2 do{p2'=0, c2'=0} goto x2R62W;

loc x2R62W : while c2<=C2_WORST & p6<=T6-delta stop{c6}
    when c2>=C2_BEST do {} goto x62R;
    when p6>=T6-delta do {} goto error;

loc x63R7W : while c6<=C63_WORST & p6<=T6-delta  & p2<=T2 wait{}
    when c6>=C63_BEST do {c6'=0} goto x7R;
    when p6>=T6-delta  do {} goto error;
    when p2>=T2 do {p2'=0,c2'=0} goto x2R63W7W;

loc x7R : while c6<=C7_WORST & p6<=T6-delta  & p2<=T2 wait{}
    when c6>=C7_BEST do {} goto idle;
    when p6>=T6-delta  & c6<C7_WORST goto error;
    when p2>=T2 & c6<C7_WORST do{p2'=0,c2'=0} goto x2R7W;

loc x2R63W7W: while c2<=C2_WORST & p6<=T6-delta  stop{c6}
    when c2>=C2_BEST do {} goto x63R7W;
    when p6>=T6-delta  do{} goto error;

loc x2R7W: while c2<=C2_WORST & p6<=T6-delta  stop{c6}
    when c2>=C2_BEST do {} goto x7R;
    when p6>=T6-delta  do{} goto error;
    
loc error: while True wait{} 

end

var init: region;

init := loc[sched] = idle &
    p6>=0 & p6<=T6+J6 &
    p2>=0 & p2<=T2
    
    (* For fair comparison between EF and IM-based algorithms *)
(*    & 30 <= T2 & T2 <= 50
    & 90 <= T6 & T6 <= 100*)
    & 00 <= T2 & T2 <= 50
    & 00 <= T6 & T6 <= 100
;


property := unreachable loc[sched] = error;
