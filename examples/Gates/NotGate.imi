(************************************************************
 *                         IMITATOR
 *
 * Model of an "NOT" logical gate
 *
 * Author          : Etienne Andre
 * Created         : 2015/01/29
 * Last modified   : 2015/01/29
 * IMITATOR version: 2.6.2
 ************************************************************)

var 	ckNot
		: clock;

	dNot_l, dNot_u
			: parameter;


(************************************************************)
  automaton NotGate
(************************************************************)
synclabs: iUp, iDown, oUp, oDown;

(* Unstable *)
loc Not00: while ckNot <= dNot_u wait {}
	when True sync iUp do {} goto Not10;
	when ckNot >= dNot_l sync oUp do {} goto Not01;

(* Stable *)
loc Not01: while True wait {}
	when True sync iUp do {ckNot' = 0} goto Not11;

(* Stable *)
loc Not10: while True wait {}
	when True sync iDown do {ckNot' = 0} goto Not00;

(* Unstable *)
loc Not11: while ckNot <= dNot_u wait {}
	when True sync iDown goto Not01;
	when ckNot >= dNot_l sync oDown goto Not10;

end (*NotGate*)



(************************************************************)
(* Analysis *)
(************************************************************)

init := True
	(*------------------------------------------------------------
	   INITIAL LOCATION
	  ------------------------------------------------------------*)
	& loc[NotGate] = Not00

	(*------------------------------------------------------------
	   INITIAL CLOCKS
	  ------------------------------------------------------------*)
	& ckNot = 0

	(*------------------------------------------------------------
	   PARAMETER CONSTRAINTS
	  ------------------------------------------------------------*)
	& dNot_l >= 0
	& dNot_l <= dNot_u
;

end
