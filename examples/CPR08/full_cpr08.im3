var
	O_1, O_2, C_1, C_2, D_1, D_2, T_1, T_2 : parameter;

automaton act_t1

var clock_1 :clock;

synclabs: Release1;

loc WFO: while clock_1 <= O_1 wait {}
	when clock_1 = O_1 sync Release1 do {clock_1'=0} goto WFP;

loc WFP: while clock_1 <= T_1 wait {}
	when clock_1 = T_1  sync Release1 do {clock_1' = 0} goto WFP;

end

automaton act_t2

var clock_2 :clock;

synclabs: Release2;

loc WFO: while clock_2 <= O_2 wait {}
	when clock_2 = O_2 sync Release2 do {clock_2'=0} goto WFP;

loc WFP: while clock_2 <= T_2 wait {}
	when clock_2 = T_2  sync Release2 do {clock_2' = 0} goto WFP;

end

automaton scheduler_1

var
	SC_1r: analog;
	SC_1x: clock;

synclabs: Release1, Busy_idle1, Check_idle1, Check_error1;

loc idle: while SC_1r <= D_1 wait {SC_1r' = 0}
	when True sync Release1 do {SC_1x'=0, SC_1r'= C_1} goto busy;
	when True sync Release1 do {SC_1x'=0, SC_1r'= C_1} goto check;

loc busy: while SC_1r <= D_1  wait {SC_1r' = 0}
	when True sync Release1 do {SC_1r' = SC_1r, SC_1x'= SC_1x} goto busy;
	when SC_2x = SC_2r sync Busy_idle1 do {SC_1r'= SC_1r, SC_1x' = SC_1x} goto idle;
	when True sync Release1 do {SC_2x'=0, SC_2r' = SC_2r + C_2 - SC_2x} goto check;

loc check: while SC_1r <= D_1  wait {SC_1r'= 0}
	when True sync Release1 do {SC_1r'= SC_1r + C_1, SC_1x' = SC_1x} goto check;
	when SC_1x < SC_1r & SC_1x >= D_1 sync Check_error1 do {SC_1r'= SC_1r, SC_1x' = SC_1x} goto error;
	when SC_1x = SC_1r & SC_1x < D_1 do {SC_1r'= SC_1r, SC_1x' = SC_1x} sync Check_idle1 goto idle;

loc error: while SC_1r <= D_1 wait {SC_1r'=0}

end


automaton scheduler_2

var
	SC_2r : analog;
	SC_2x : clock;

synclabs: Release1, Release2, Busy_idle2, Check_idle2, Check_error2;

loc idle: while SC_2r <= D_2 wait {SC_2r' = 0}
	when True sync Release1 do {SC_2x'=0, SC_2r'= C_1} goto busy;
	when True sync Release2 do {SC_2x'=0, SC_2r'= C_2} goto busy;
	when True sync Release2 do {SC_2x'=0, SC_2r'= C_2} goto check;

loc busy: while SC_2r <= D_2 wait {SC_2r' = 0}
	when SC_2x = SC_2r sync Busy_idle2 do {SC_2r'= SC_2r, SC_2x'= SC_2x} goto idle;
	when True sync Release2 do {SC_2r ' = SC_2r + C_2, SC_2x'= SC_2x} goto busy;
	when True sync Release1 do {SC_2r ' = SC_2r + C_1, SC_2x'= SC_2x} goto busy;
	when True sync Release2 do {SC_2r ' = SC_2r + C_2 - SC_2x, SC_2x'=0} goto check;

loc check: while SC_2r <= D_2 wait {SC_2r' = 0}
	when True sync Release2 do {SC_2r'= SC_2r, SC_2x'= SC_2x} goto check;
	when SC_2x < SC_2r & SC_2x < D_2 sync Release1 do {SC_2r' = SC_2r + C_1, SC_2x'= SC_2x} goto check;
	when SC_2x = SC_2r & SC_2x <= D_2 do {SC_2r'= SC_2r, SC_2x'= SC_2x} sync Check_idle2 goto idle;
	when SC_2x < SC_2r & SC_2x >= D_2 do {SC_2r'= SC_2r, SC_2x'= SC_2x} sync Check_error2 goto error_s;

loc error_s: while SC_2r <= D_2 wait {SC_2r' = 0}

end


var init: region;

init:=	loc[act_t1]  = WFO  &
			loc[act_t2]  = WFO  &
			loc[scheduler_1] = idle &	
			loc[scheduler_2] = idle &	
			clock_1 = 0 &
			clock_2 = 0 &
			SC_2x = 0 &
			SC_2r = 0 &
			SC_1x = 0 &
			SC_1r = 0 &
			-----------
			-- PI 0  --
			-----------
			D_1 = 7 &
			T_1 = 10 &
			D_2 = 6 &
			T_2 = 10 &
			O_1 = 0 --&
--			O_2 = 3 &
--			C_1 = 3 &
--			C_2 = 5
;
