(************************************************************
 *                      IMITATOR MODEL                      
 *
 * Empty template of a case study
 *
 * Description     : The network presented in Figure 2 models the system consisting of the Producer feeding the Consumer with data sent through a sequence of nodes with additional processing capabilities. The model is scalable with respect to the number n of the processing nodes and the length m of each processing node and it contains three lower (a,c,e) and three upper (b,d,f) parameters.
 * Correctness     : φ2 = ConsWaiting ∧ ProdReady ∧ xtotal ≥ 5
 * Source          : SMT-based Parameter Synthesis for L/U Automata, Michal Knapik and Wojciech Penczek
 * Author          : Michal Knapik and Wojciech Penczek
 * Modeling        : Michal Knapik and Wojciech Penczek
 * Input by        : Étienne André
 *
 * Created         : 2015/09/18
 * Last modified   : 2015/09/18
 *
 * IMITATOR version: 2.7.2
 ************************************************************)

var

(* Clocks *)
 	x1, x2, x3, x4
		: clock;

(* Parameters *)
	a, b, c, d, e, f
		: parameter;



(************************************************************)
  automaton Producer
(************************************************************)
synclabs: ProdReset, Feed2;

loc prodReady: while x1 <= d wait {}
	when x1 >= c sync Feed2 do {x1' = 0} goto prodWaiting;

loc prodWaiting: while x1 <= b wait {}
	when x1 >= a sync ProdReset do {x1' = 0} goto prodReady;

end (* Producer *)



(************************************************************)
  automaton Consumer
(************************************************************)
synclabs: ConsReset, Feed4;

loc consReady: while x4 <= d wait {}
	when x4 >= c sync Feed4 do {x4' = 0} goto consWaiting;

loc consWaiting: while x4 <= b wait {}
	when x4 >= a sync ConsReset do {x4' = 0} goto consReady;

end (* Consumer *)



(************************************************************)
  automaton Node1
(************************************************************)
synclabs: Node1Process1, Node1Process2, Node1Process3, Feed2, Feed3;

loc node1Ready: while x2 <= d wait {}
	when x2 >= c sync Feed2 do {x2' = 0} goto intermediate1;

loc intermediate1: while x2 <= f wait {}
	when x2 >= e sync Node1Process1 do {x2' = 0} goto intermediate2;

loc intermediate2: while x2 <= f wait {}
	when x2 >= e sync Node1Process2 do {x2' = 0} goto intermediate3;

loc intermediate3: while x2 <= f wait {}
	when x2 >= e sync Node1Process3 do {x2' = 0} goto send;

loc send: while x2 <= d wait {}
	when x2 >= c sync Feed3 do {x2' = 0} goto node1Ready;

end (* Node1 *)


(************************************************************)
  automaton Node2
(************************************************************)
synclabs: Node2Process1, Node2Process2, Node2Process3, Feed3, Feed4;

loc node2Ready: while x3 <= d wait {}
	when x3 >= c sync Feed3 do {x3' = 0} goto intermediate1;

loc intermediate1: while x3 <= f wait {}
	when x3 >= e sync Node2Process1 do {x3' = 0} goto intermediate2;

loc intermediate2: while x3 <= f wait {}
	when x3 >= e sync Node2Process2 do {x3' = 0} goto intermediate3;

loc intermediate3: while x3 <= f wait {}
	when x3 >= e sync Node2Process3 do {x3' = 0} goto send;

loc send: while x3 <= d wait {}
	when x3 >= c sync Feed4 do {x3' = 0} goto node2Ready;

end (* Node2 *)



(************************************************************)
(* Initial state *)
(************************************************************)

init :=
	(*------------------------------------------------------------*)
	(* Initial location *)
	(*------------------------------------------------------------*)
	& loc[Producer]	= prodReady
	& loc[Consumer]	= consReady
	& loc[Node1]	= node1Ready
	& loc[Node2]	= node2Ready

	(*------------------------------------------------------------*)
	(* Initial clock constraints *)
	(*------------------------------------------------------------*)
	& x1 = 0
	& x2 = 0
	& x3 = 0
	& x4 = 0

	(*------------------------------------------------------------*)
	(* Parameter constraints *)
	(*------------------------------------------------------------*)
	& a >= 0
	& b >= 0
	& c >= 0
	& d >= 0
	& e >= 0
	& f >= 0
;


(************************************************************)
(* Property specification *)
(************************************************************)

property := unreachable loc[Consumer] = consWaiting & loc[Producer] = prodReady;


(************************************************************)
(* The end *)
(************************************************************)
end
