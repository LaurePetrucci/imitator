(************************************************************
 *                      IMITATOR MODEL                      
 *
 * Coffee vending machine with drinker. Version for an IMITATOR tool paper.
 *
 * Description     : Coffee vending machine; a single button is used to wake the machine up, and to add sugar. Then a cup, and coffee are delivered after a (parametric) time.
	Drinker: [ongoing work]
 * Correctness     : Many possibilities (e.g., "it is possible to get a coffee")
 * Source          : Own work
 * Author          : Etienne Andre
 * Input by        : Etienne Andre
 *
 * Created         : 2011/01/21
 * Fork from       : coffeeDrinker.imi
 * Fork date       : 2015/10/14
 * Last modified   : 2015/10/14
 *
 * IMITATOR version: 2.7.2
 ************************************************************)

var

(* Clocks *)
 	x1, x2, y
		: clock;

(* Parameters *)
	(* time during which the button cannot be pressed after a pressure *)
 	p_block_button = 1,
	(* time during which one can add sugar *)
	p_add_sugar,
	(* time needed to prepare the coffee from the first button pressure *)
	p_coffee,

	(* interval of work without need for coffee *)
	p_work_min = 3600, p_work_max = 7200,
	(* interval of time between 2 consecutive pressures by the user *)
(* 	p_press, *)
	(* time after which the drinker gets mad *)
	p_patience_max = 15
		: parameter;

(* Discrete variables *)
	nb_sugar
		: discrete;

(* Constants *)
	MAX_SUGAR = 3
		: parameter;


(************************************************************)
  automaton machine
(************************************************************)
synclabs: press, cup, coffee, sleep;

loc idle: while True wait {}
	when True sync press do {x1' = 0, x2' = 0} goto add_sugar;

loc add_sugar: while x2 <= p_add_sugar & x2 <= p_coffee wait {}
	when x1 >= p_block_button sync press do {x1' = 0} goto add_sugar;
	when x2 = p_add_sugar sync cup do {x2' = 0} goto preparing_coffee;

loc preparing_coffee: while x2 <= p_coffee wait {}
(* 	when x2 = p_coffee sync coffee goto idle; *)
(* 	when True sync press goto preparing_coffee; *)
	when x2 = p_coffee sync coffee do {x1' = 0} goto cdone;

loc cdone: while x1 <= 10 wait {}
	when True sync press do {x1' = 0, x2' = 0} goto add_sugar;
	when x1 = 10 sync sleep goto idle;

end (* machine *)


(************************************************************)
  automaton researcher
(************************************************************)
synclabs: press, coffee;

loc researching: while y <= p_work_max wait {}
	when y >= p_work_min sync press do {y' = 0, nb_sugar' = 0} goto add_sugar;

loc add_sugar: while y <= p_patience_max & nb_sugar <= MAX_SUGAR wait {}
	when nb_sugar < MAX_SUGAR - 1 sync press do {nb_sugar' = nb_sugar + 1} goto add_sugar;
	when nb_sugar = MAX_SUGAR - 1 sync press do {nb_sugar' = nb_sugar + 1} goto wait_coffee;
	when y = p_patience_max goto mad;

loc wait_coffee: while y <= p_patience_max wait {}
	when y < p_patience_max sync coffee do {y' = 0} goto researching;
	when y = p_patience_max goto mad;

loc mad: while True wait {}

end (* researcher *)


(************************************************************)
(* Initial state *)
(************************************************************)

init :=
	(*------------------------------------------------------------
	   INITIAL LOCATION
	  ------------------------------------------------------------*)
	& loc[machine]		= idle
	& loc[researcher]	= researching

	(*------------------------------------------------------------
	   INITIAL CLOCKS
	  ------------------------------------------------------------*)
	& x1 = 0
	& x2 = 0
	& y >= 0 & y <= p_work_max

	(*------------------------------------------------------------
	   INITIAL DISCRETE
	  ------------------------------------------------------------*)
	& nb_sugar = 0
	
	(*------------------------------------------------------------
	   PARAMETER CONSTRAINTS
	  ------------------------------------------------------------*)
	& p_block_button >= 0
	& p_add_sugar >= 0
	& p_coffee >= 0
(* 	& p_press >= 0 *)
	& p_work_min >= 0
	& p_work_min <= p_work_max
	& p_patience_max >= 0
;


(************************************************************)
(* Property specification *)
(************************************************************)

property := unreachable loc[researcher] = mad;
(* projectresult((*p_patience_max, *)p_press, p_coffee); *)


(************************************************************)
(* The end *)
(************************************************************)
end
