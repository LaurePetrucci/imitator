(************************************************************
 *                      IMITATOR MODEL                      
 *
 * Temperature controller
 *
 * Description     : Temperature controller
 * Correctness     : Unclear
 * Source          : https://github.com/astefano/efsmt_coverts/tree/master/imitator_examples/Imitator/tc
 * Author          : Lacramioara Astefanoaei
 * Modeling        : Lacramioara Astefanoaei
 * Input by        : Lacramioara Astefanoaei / Étienne André
 * License         : Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
 *
 * Created         : 2017/01/20
 * Last modified   : 2017/01/20
 *
 * IMITATOR version: 2.8
 ************************************************************)

var

(* Clocks *)
 	xc,
 	x_0, x_1
		: clock;

(* Parameters *)
	(*p*) (* declared in controller.imi but unused *)
	ct
		: parameter;


(*Synchronization model:
cool , cool0 

cool , cool1

heat , rest0

heat , rest1*)


(************************************************************)
automaton controller
(************************************************************)
synclabs: (*coolc, restc*) cool_0, cool_1, rest_0, rest_1;

loc lc0: while xc <= 900 wait {}
        when xc = 900 sync cool_0 do {xc'=0} goto lc1;
        when xc = 900 sync cool_1 do {xc'=0} goto lc1;

loc lc1: while xc <= 450 wait {}
        when xc = 450 sync rest_0 do {xc'=0} goto lc0;
        when xc = 450 sync rest_1 do {xc'=0} goto lc0;

end


(************************************************************)
automaton Rod_0
(************************************************************)
synclabs: cool_0, rest_0;

loc l0_0: while True wait {}
        when x_0 >= ct sync cool_0 do {} goto l1_0;

loc l1_0: while True wait {}
        when True sync rest_0 do {x_0'=0} goto l0_0;

end


(************************************************************)
automaton Rod_1
(************************************************************)

synclabs: cool_1, rest_1;

loc l0_1: while True wait {}
        when x_1 >= ct sync cool_1 do {} goto l1_1;

loc l1_1: while True wait {}
        when True sync rest_1 do {x_1'=0} goto l0_1;

end


(************************************************************)
(* Initial state *)
(************************************************************)

init :=
	(*------------------------------------------------------------*)
	(* Initial location *)
	(*------------------------------------------------------------*)
	& loc[controller] = lc0
	& loc[Rod_0] = l0_0
	& loc[Rod_1] = l0_1

	(*------------------------------------------------------------*)
	(* Initial clock constraints *)
	(*------------------------------------------------------------*)
	& xc = 0
	& x_0 = ct
	& x_1 = ct

	(*------------------------------------------------------------*)
	(* Parameter constraints *)
	(*------------------------------------------------------------*)
	& ct >= 0
;


(************************************************************)
(* Property specification *)
(************************************************************)

(* property := unreachable loc[pta] = l1; *)


(************************************************************)
(* The end *)
(************************************************************)
end
