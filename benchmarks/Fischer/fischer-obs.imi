--************************************************************--
--************************************************************--
--
--   Fischer's mutual exclusion protocol
--
--   Romain SOULAT, Etienne ANDRE
--   Laboratoire Specification Verification & CNRS, France
--   LIPN, Universite Paris 13, France
--
--                                Created : < 2012/02/14
--                  Fork from fischer.imi :   2015/02/18
--                          Last modified :   2015/02/18
--************************************************************--
--************************************************************--

var 
	x1, -- P1's clock
	x2  -- P2's clock
		:clock;
	

	k
		: discrete;

	a,
	b
		: parameter;



--************************************************************--
automaton proc1
--************************************************************--
synclabs : tau,start1,set1,enter1,abort1,release1;


loc idle: while True wait {}
	when k=0 sync start1 do {x1' =0} goto start;
	when True sync tau do {} goto idle;
	
loc start: while x1<=a wait {}
	when True sync set1 do {k' =1 , x1' =0} goto check;
	when True sync tau do {} goto start;

loc check: while True wait {}
	when k=1 & x1>=b sync enter1 goto CS;
	when k<1 & x1>=b sync abort1 goto idle;
	when k>1 & x1>=b sync abort1 goto idle;
	when True sync tau do {} goto check;

loc CS: while True wait {}
	when True sync release1 do {k' = 0} goto idle;
	when True sync tau do {} goto CS;
end

--************************************************************--
automaton proc2
--************************************************************--
synclabs : tau,start2,set2,enter2,abort2,release2;


loc idle: while True wait {}
	when k=0 sync start2 do {x2' =0} goto start;
	when True sync tau do {} goto idle;
	
loc start: while x2<=a wait {}
	when True sync set2 do {k' =2,x2' =0} goto check;
	when True sync tau do {} goto start;

loc check: while True wait {}
	when k=2 & x2>=b sync enter2 goto CS;
	when k<2 & x2>=b sync abort2 goto idle;
	when k>2 & x2>=b sync abort2 goto idle;
	when True sync tau do {} goto check;

loc CS: while True wait {}
	when True sync release2 do {k' = 0} goto idle;
	when True sync tau do {} goto CS;
end

--************************************************************--
automaton arbitrer
--************************************************************--
synclabs : set1,release1,
           set2,release2,
	   tau;
	   

loc loc_arbitrer: while True wait {}
	when True sync set1 do {} goto loc_arbitrer;
	when True sync release1 do {} goto loc_arbitrer;
	when True sync set2 do {} goto loc_arbitrer;
	when True sync release2 do {} goto loc_arbitrer;
	when True sync tau do {} goto loc_arbitrer;
end


--************************************************************--
automaton obs
--************************************************************--
synclabs : enter1, release1,
           enter2, release2;
	   

loc obs0: while True wait {}
	when True sync enter1 goto obs1;
	when True sync enter2 goto obs2;

loc obs1: while True wait {}
	when True sync release1 goto obs0;
	when True sync enter2 goto violation;

loc obs2: while True wait {}
	when True sync release2 goto obs0;
	when True sync enter1 goto violation;

loc violation: while True wait {}

end


--************************************************************--
--************************************************************--
-- ANALYSIS
--************************************************************--
--************************************************************--


var 
   init: region;

   
init:=
	----------------------
	-- Initial locations
	----------------------
	  loc[proc1] = idle
	& loc[proc2] = idle
	& loc[arbitrer] = loc_arbitrer
	& loc[obs] = obs0
	
	----------------------
	-- Clocks
	----------------------
	& x1 = 0
	& x2 = 0
	
	----------------------
	-- Discrete
	----------------------
	& k=0

	----------------------
	-- Parameters
	----------------------
	& a >= 0
	& b >= 0
;

property := unreachable loc[obs] = violation;
