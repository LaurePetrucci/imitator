(************************************************************
 *                      IMITATOR MODEL                      
 *
 * Empty template of a case study
 *
 * Description     : TODO
 * Correctness     : TODO
 * Source          : TODO
 * Author          : ME
 * Modeling        : ME
 * Input by        : ME
 * License         : Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
 *
 * Created         : 2019/05/14
 * Last modified   : 2019/05/14
 *
 * IMITATOR version: 2.11
 ************************************************************)

var

(* Clocks *)
 	x,
 	y,
		: clock;

(* Discrete *)
	i,
	j,
		: discrete;

(* Parameters *)
	p,
		: parameter;



(************************************************************)
  automaton pta1
(************************************************************)
synclabs: a;

loc l1: invariant True
	when x = p + 1 sync a do {x := 0} goto l1;

end (* pta *)



(************************************************************)
  automaton pta2
(************************************************************)
synclabs: a;

loc l1: invariant True
	when y = 1 sync a do {y := p} goto l1;

end (* pta *)



(************************************************************)
(* Initial state *)
(************************************************************)

init :=
	(*------------------------------------------------------------*)
	(* Initial location *)
	(*------------------------------------------------------------*)
	& loc[pta1] = l1
	& loc[pta2] = l1

	(*------------------------------------------------------------*)
	(* Initial discrete assignments *)
	(*------------------------------------------------------------*)
	& i = 0
	& j = 0

	(*------------------------------------------------------------*)
	(* Initial clock constraints *)
	(*------------------------------------------------------------*)
	& x = 0
	& y = 0

	(*------------------------------------------------------------*)
	(* Parameter constraints *)
	(*------------------------------------------------------------*)
	& p >= 0
	& p >= 1
;


(************************************************************)
(* Property specification *)
(************************************************************)
property := unreachable loc[pta1] = l1 & loc[pta2] = l1;


(************************************************************)
(* The end *)
(************************************************************)
end
